{"version":3,"file":"angular-cropperjs.mjs","sources":["../../../projects/angular-cropperjs/src/lib/angular-cropperjs.service.ts","../../../projects/angular-cropperjs/src/lib/cropper/cropper.component.ts","../../../projects/angular-cropperjs/src/lib/cropper/cropper.component.html","../../../projects/angular-cropperjs/src/lib/angular-cropperjs.module.ts","../../../projects/angular-cropperjs/src/public_api.ts","../../../projects/angular-cropperjs/src/angular-cropperjs.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularCropperjsService {\n\n  constructor() { }\n}\n","import {\n    Component,\n    OnInit,\n    ViewEncapsulation,\n    ElementRef,\n    ViewChild,\n    Input,\n    EventEmitter,\n    Output,\n    OnDestroy,\n} from \"@angular/core\";\nimport Cropper from \"cropperjs\";\n\nexport interface ImageCropperSetting {\n    width: number;\n    height: number;\n}\n\nexport interface ImageCropperResult {\n    imageData: Cropper.ImageData;\n    cropData: Cropper.CropBoxData;\n    blob?: Blob;\n    dataUrl?: string;\n}\n\n@Component({\n    selector: \"angular-cropper\",\n    templateUrl: \"./cropper.component.html\",\n    styleUrls: [\"./cropper.component.css\"],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class CropperComponent implements OnInit, OnDestroy {\n    @ViewChild(\"image\", { static: true }) image: ElementRef;\n\n    @Input() imageUrl: any;\n    @Input() settings: ImageCropperSetting;\n    @Input() cropbox: Cropper.CropBoxData;\n    @Input() loadImageErrorText: string;\n    @Input() cropperOptions: any = {};\n\n    @Output() export = new EventEmitter<ImageCropperResult>();\n    @Output() ready = new EventEmitter();\n\n    public isLoading: boolean = true;\n    public cropper: Cropper;\n    public imageElement: HTMLImageElement;\n    public loadError: any;\n\n    constructor() {}\n\n    ngOnInit() {}\n\n    ngOnDestroy() {\n        if (this.cropper) {\n            this.cropper.destroy();\n            this.cropper = null;\n        }\n    }\n\n    /**\n     * Image loaded\n     * @param ev\n     */\n    imageLoaded(ev: Event) {\n        //\n        // Unset load error state\n        this.loadError = false;\n\n        //\n        // Setup image element\n        const image = ev.target as HTMLImageElement;\n        this.imageElement = image;\n\n        //\n        // Add crossOrigin?\n        if (this.cropperOptions.checkCrossOrigin)\n            image.crossOrigin = \"anonymous\";\n\n        //\n        // Image on ready event\n        image.addEventListener(\"ready\", () => {\n            //\n            // Emit ready\n            this.ready.emit(true);\n\n            //\n            // Unset loading state\n            this.isLoading = false;\n\n            //\n            // Validate cropbox existance\n            if (this.cropbox) {\n                //\n                // Set cropbox data\n                this.cropper.setCropBoxData(this.cropbox);\n            }\n        });\n\n        //\n        // Setup aspect ratio according to settings\n        let aspectRatio = NaN;\n        if (this.settings) {\n            const { width, height } = this.settings;\n            aspectRatio = width / height;\n        }\n\n        //\n        // Set crop options\n        // extend default with custom config\n        this.cropperOptions = {\n            ...{\n                aspectRatio,\n                checkCrossOrigin: true,\n            },\n            ...this.cropperOptions,\n        };\n\n        //\n        // Set cropperjs\n        if (this.cropper) {\n            this.cropper.destroy();\n            this.cropper = undefined;\n        }\n        this.cropper = new Cropper(image, this.cropperOptions);\n    }\n\n    /**\n     * Image load error\n     * @param event\n     */\n    imageLoadError(event: any) {\n        //\n        // Set load error state\n        this.loadError = true;\n\n        //\n        // Unset loading state\n        this.isLoading = false;\n    }\n\n    /**\n     * Export canvas\n     * @param base64\n     */\n    exportCanvas(base64?: any) {\n        //\n        // Get and set image, crop and canvas data\n        const imageData = this.cropper.getImageData();\n        const cropData = this.cropper.getCropBoxData();\n        const canvas = this.cropper.getCroppedCanvas();\n        const data = { imageData, cropData };\n\n        //\n        // Create promise to resolve canvas data\n        const promise = new Promise((resolve) => {\n            //\n            // Validate base64\n            if (base64) {\n                //\n                // Resolve promise with dataUrl\n                return resolve({\n                    dataUrl: canvas.toDataURL(\"image/png\"),\n                });\n            }\n            canvas.toBlob((blob) => resolve({ blob }));\n        });\n\n        //\n        // Emit export data when promise is ready\n        promise.then((res: any) => {\n            this.export.emit({ ...data, ...res });\n        });\n    }\n}\n","<!-- CROPPER WRAPPER -->\n<div class=\"cropper-wrapper\">\n\n    <!-- LOADING -->\n    <div class=\"loading-block\" *ngIf=\"isLoading\">\n        <div class=\"spinner\"></div>\n    </div>\n\n    <!-- LOAD ERROR -->\n    <div class=\"alert alert-warning\" *ngIf=\"loadError\">{{ loadImageErrorText }}</div>\n\n    <!-- CROPPER -->\n    <div class=\"cropper\">\n        <img #image alt=\"image\" [src]=\"imageUrl\" (load)=\"imageLoaded($event)\" (error)=\"imageLoadError($event)\" />\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CropperComponent } from './cropper/cropper.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [CropperComponent],\n    exports: [CropperComponent]\n})\nexport class AngularCropperjsModule { }\n","/*\n * Public API Surface of angular-cropperjs\n */\n\nexport * from './lib/angular-cropperjs.service';\nexport * from './lib/cropper/cropper.component';\nexport * from './lib/angular-cropperjs.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}